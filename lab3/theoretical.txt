2) Зачем нужны статик методы в интерфейсах

Static методы нельзя переопределить в классах, которые implements интерфейс
Для фабричных методов, методов, которые можно вызывать, без объекта класса





3) Лямбда выражение, почему компаратор можно, лист нельзя, почему функциональный интерфейс так называется

Comparator — функциональный интерфейс; у него есть единственный абстрактный метод compare(T o1, T o2)
List - не функциональный интерфейс; у List много абстрактных методов (add(), get(), size(), remove(), clear() и тд)
Лямбда-выражения работают только с функциональными интерфейсами. Comparator подходит, потому что у него один абстрактный метод, а List — нет, потому что методов много




4) Вообще всё про лямбды

Лямбда-выражения (лямбды) — это краткий способ записи анонимных функций, которые можно передавать в методы или сохранять в переменных
Лямбда-выражение - это функция без имени, которая:
    1) Может принимать параметры.
    2) Выполняет блок кода или возвращает значение.
    3) Реализует метод функционального интерфейса
(args) -> { body }

Лямбды нужны для:
	1) Упрощение кода
		анонимный класс
		Runnable r = new Runnable() {
				@Override
				public void run() {
						System.out.println("Hello!");
				}
		};
		лямбда
		Runnable r = () -> System.out.println("Hello!");

		анонимный класс
		new Thread(new Runnable() {
				@Override
				public void run() {
						System.out.println("Thread is running!");
				}
		}).start();
		лямбда
		new Thread(() -> System.out.println("Thread is running!")).start();


	2) Использование в Stream
		List<String> names = Arrays.asList("Alice", "Bob", "Charlie");
		names.stream()
     	.filter(name -> name.startsWith("A"))
     	.forEach(System.out::println);

Использовать лямбды:
	1) Передача простой логики в методы (например, в sort(), filter())
	2) Работа с stream
	3) Сокращение кода при работе с Runnable, Callable, Comparator и др

Не использовать лямбды:
	1) Нужно реализовать несколько методов
	2) Требуется сложная логика (лучше вынести в отдельный метод)






6) Ссылки на методы – виды, как устроены

Ссылки на методы — это компактный синтаксис для передачи методов в качестве аргументов (аналогично лямбдам), работают только в контексте функциональных интерфейсов.
Это сокращённая запись лямбда-выражения, когда:
  1) Лямбда просто вызывает уже существующий метод
  2) Синтаксис: Класс::метод (или объект::метод)

list.forEach(x -> System.out.println(x));
list.forEach(System.out::println);

Виды:
	1) Ссылка на статический метод
		Function<Integer, Double> converter2 = Math::sqrt;
		System.out.println(converter2.apply(25)); // 5.0
	2) Ссылка на метод экземпляра
		String greeting = "Hello";
		System.out.println(lambda2.get()); // "HELLO"
	3) Ссылка на метод произвольного объекта
		List<String> names = List.of("Alice", "Bob", "Charlie");
		names.stream().map(String::length).forEach(System.out::println); // 5 3 7
	4) Ссылка на конструктор
		Supplier<List<String>> lambda2 = ArrayList::new;
		List<String> list = lambda2.get();

Под капотом Java преобразует ссылки в лямбда-выражения, которые реализуют функциональный интерфейс.
Пример с Comparator:
	Comparator<String> comparator = String::compareToIgnoreCase;
	// Под капотом это превращается в:
	Comparator<String> comparator = (s1, s2) -> s1.compareToIgnoreCase(s2);

Когда что использовать:
    1) Лямбда — если нужно выполнить несколько операций или использовать внешние переменные.
    2) Ссылка на метод — если просто вызывается готовый метод.