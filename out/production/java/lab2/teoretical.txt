1) Абстракция - ? Почему не принцип ООП. Или принцип?

Абстракция = сокрытие внутренней реализации от юзера. это принцип ООП по:
1 https://www.interviewbit.com/blog/principles-of-oops/
2 https://www.geeksforgeeks.org/introduction-of-object-oriented-programming/
3 https://www.digitalocean.com/community/tutorials/oops-concepts-java-example#oops-concepts
4 https://www.digitalocean.com/community/tutorials/what-is-abstraction-in-oops
5 "Важнейшим элементом ООП является абстракция" из Шилдт Г. - Java. Полное руководство. 12-е издание (страница 60)


А по Java_SE_8_Bazovy_kurs_Key_S_Khorstmann абстракция = часть инкапсуляции => не принцип






2) Инкапсуляция – api – ok, что ещё?

Сокрытие внутренней реализации (контроль доступа)
Защита данных от некорректного изменения
Упрощение изменения кода (внутри код меняется, но снаружи ничего не меняется)








3) Как вызывать один конструктор из другого?

public class Car {
    private String model;
    private int year;
    private String color;

    public Car(String model) {
        this(model, 2020, "Black");
    }

    public Car(String model, int year) {
        this(model, year, "White");
    }

    public Car(String model, int year, String color) {
        this.model = model;
        this.year = year;
        this.color = color;
    }
}







4) У каких классов есть конструктор по умолчанию?

1 Если в классе не объявлен ни один конструктор, компилятор Java автоматически добавляет пустой конструктор по умолчанию

2 Если у родительского класса есть конструктор по умолчанию, а подкласс не определяет свои конструкторы, то подкласс также получает неявный конструктор по умолчанию
class Animal {
    public Animal() {}
}

class Cat extends Animal {}

Cat cat = new Cat();  






5) Как создать класс, экземпляры которого нельзя создать – зачем?

1 Абстрактный класс 
2 Интерфейс 

Зачем:
1 только статические методы (Math)









8) Почему в 5 задаче точка реально иммутабельная?

1 Класс объявлен как final (Это запрещает наследование)
2 Все поля private final
3 Нет сеттеров 
4 Методы translate и scale возвращают новый объект
5 Защита от внешнего изменения (Поля x и y — примитивы (double), поэтому их значения копируются при передаче (нет риска изменения через ссылку, как в случае с объектами))
